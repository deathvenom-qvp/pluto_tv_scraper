(function() {
	var http = require('http');
	var https = require('https');
	var url = require('url');
	var routes = [];
	var errorHandlers = {};

	var addRoute = function (path, method, handler) {
		routes.push({ path: path, method: method, handler: handler });
	};

	var addErrorHandler = function (code, handler) {
		errorHandlers[code] = handler;
	};

	var match = function (routePath, urlPath) {
		if (routePath === urlPath) return [];

		var rv = [];
		var routeParts = routePath.split("/");
		var urlParts = urlPath.split("/");
		if (routeParts.length === urlParts.length) {
			for (var i = 0; i < routeParts.length; i++) {
				var routePart = routeParts[i];
				var name = routePart.substring(1, routePart.length - 1);
				if (routePart === '{' + name + '}') {
					rv[name] = urlParts[i];
				} else if (routePart !== urlParts[i]) {
					rv = false;
					break;
				}
			}
			return rv;
		}
		return false;
	}

	var handleRoutes = function (req, res) {
		var notFound = true;
		routes.forEach(function(route) {
			if (notFound && route.method === req.method) {
				var extraParams = match(route.path, req.pathname);
				if (extraParams !== false) {
					for (var x in extraParams) {
						req.query[x] = extraParams[x];
					}
					route.handler(req, res);
					notFound = false;
				}
			}
		});
		if (notFound) {
			if (errorHandlers["404"]) {
				errorHandlers["404"](req, res);
			} else {
				res.response(404, "not found");
				res.end();
			}
		}
	};

	var handle = function (req, res) {
		var body = [];
		req.on('error', function (err) {
			console.error(err);
		}).on('data', function (chunk) {
			body.push(chunk.toString());
		}).on('end', function () {
			var parsed = url.parse(req.url, true);
			req.body = body.join('');
			try {
				var extraParams = JSON.parse(req.body);
				for (var x in extraParams) {
					req.query[x] = extraParams[x];
				}
			} catch (ex) {
				req.query = parsed.query;
			}

			req.pathname = parsed.pathname;
			res.jsonResponse = function (code, body, headers) {
				if (headers) {
					res.writeHead(code, headers);
				} else {
					res.writeHead(code, { "Content-Type": "application/json" });
				}

				res.write(JSON.stringify(body));
				res.end();
			};

			res.response = function (code, body, headers) {
				if (headers) {
					res.writeHead(code, headers);
				} else {
					res.writeHead(code, { "Content-Type": "text/html" });
				}
				res.write(body);
				res.end();
			};

			try {
				handleRoutes(req, res);
			} catch (ex) {
				if (errorHandlers["500"]) {
					errorHandlers["500"](req, res);
				} else {
					console.error(ex.message);
					res.writeHeader(500, "Server Error");
					res.end();
				}
			}
		});
	};

	var serve = function (port, httpsOptions) {
		if (httpsOptions) {
			console.log("starting https server on port " + port);
			https.createServer(httpsOptions, handle).listen(port);
		} else {
			console.log("starting http server on port " + port);
			http.createServer(handle).listen(port);
		}
	};

	exports = module.exports = {
		addErrorHandler: addErrorHandler,
		addRoute: addRoute,
		serve: serve
	};
})();
